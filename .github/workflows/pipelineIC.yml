name: Workflow
on:
  push:
    branches:
      - feature-clase1
jobs:
  SAST:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: "17"
          distribution: "adopt"
      - name: Set Environment Variables
        run: echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Validate and Configure build.gradle
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -f "build.gradle" ]; then
            echo "Encontró el archivo"
            echo "Verificando configuración del plugin sonar"
            if ! grep -q 'id "org.sonarqube" version "3.3"' build.gradle; then
              echo "No se encuentra Plugin configurado"
              sed -i '/id '\''java'\''/a \\ \\ \\ \\ id '\''org.sonarqube'\'' version '\''3.3'\''' build.gradle
              echo "Plugin de Sonarcloud añadido a build.gradle"
              cat build.gradle
            else
              echo "Plugin de Sonarcloud ya está configurado en build.gradle"
            fi
          else
            echo "No se encontró archivo build.gradle"
            exit 1
          fi
      - name: Validando existencia de proyecto en SonarCloud
        id: validateProjectOnSonar
        run: |
          echo "Verificando si el proyecto existe en SonarCloud..."
          
          # Realizar la solicitud a la API para verificar si el proyecto existe
          response=$(curl -s -w "%{http_code}" -o response.json -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/projects/search?organization=glemosas&projects=${{ github.event.repository.name }}")
          
          echo "Respuesta de la API:"
          cat response.json  # Esto imprime el contenido de la respuesta JSON para depuración

          # Verificar si el proyecto ya existe en la respuesta
          if [[ "$(echo "$response" | jq -r '.components | length')" -gt 0 ]]; then
            echo "El proyecto ya existe en SonarCloud."
            echo "project_created=false" >> $GITHUB_ENV
          else
            echo "El proyecto no existe. Procediendo a crearlo..."
            
            # Intentar crear el proyecto
            create_response=$(curl -s -w "%{http_code}" -o create_response.json -X POST -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/projects/create" \
              -d "name=${{ github.event.repository.name }}" \
              -d "project=${{ github.event.repository.name }}" \
              -d "organization=glemosas" \
              -d "visibility=public")
            
            # Imprimir la respuesta de la creación para depuración
            echo "Respuesta de la creación del proyecto:"
            cat create_response.json
            
            # Verificar si el proyecto ya existe
            if echo "$create_response" | jq -e 'select(.errors[]? | .msg | contains("key already exists"))' > /dev/null; then
              echo "El proyecto ya existe con la misma clave. No se puede crear nuevamente."
              echo "project_created=false" >> $GITHUB_ENV
            else
              echo "Proyecto ${{ github.event.repository.name }} creado exitosamente en SonarCloud."
              echo "Estableciendo la rama 'main' como la rama predeterminada..."
              
              # Intentar cambiar la rama predeterminada a 'main'
              branch_response=$(curl -s -w "%{http_code}" -o branch_response.json -X POST -u "${{ secrets.SONAR_TOKEN }}:" \
                "https://sonarcloud.io/api/project_branches/rename" \
                -d "name=main" \
                -d "project=${{ github.event.repository.name }}")
              
              echo "Respuesta al cambiar la rama predeterminada:"
              cat branch_response.json  # Imprime la respuesta para depuración

              # Verificar si hubo un error al establecer la rama predeterminada
              if [[ "$(echo "$branch_response" | jq -r '.errors')" != "null" ]]; then
                echo "Error al establecer la rama predeterminada. Respuesta de la API:"
                cat branch_response.json
                exit 1
              fi
              echo "Rama 'main' establecida como predeterminada."
              echo "project_created=true" >> $GITHUB_ENV
            fi
          fi

