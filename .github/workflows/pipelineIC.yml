name: Workflow
on:
  push:
    branches:
      - feature-clase1
jobs:
  SAST:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Set Environment Variables
        run: echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Validate and Configure build.gradle
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -f "build.gradle" ]; then
            echo "Encontró el archivo"
            echo "Verificando configuración del plugin sonar"
            if ! grep -q 'id "org.sonarqube" version "3.3"' build.gradle; then
              echo "No se encuentra Plugin configurado"
              sed -i '/id '\''java'\''/a \ \ \ \ id '\''org.sonarqube'\'' version '\''3.3'\''' build.gradle
              echo "Plugin de Sonarcloud acaba de ser añadido a build.gradle"
              cat build.gradle
            else
              echo "Plugin de sonarcloud ya está configurado en build.gradle"
            fi
          else
            echo "No se encontró archivo build.gradle"
            exit 1
          fi
      - name: Validate or Create SonarCloud Project
        id: validate-project
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
          ORGANIZATION: glemos-as
        run: |
          echo "Verificando si el proyecto $REPO_NAME existe en SonarCloud..."
          response=$(curl -s -w "%{http_code}" -o response.json -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/projects/search?organization=$ORGANIZATION&project=$REPO_NAME")

          if echo "$response" | grep -q '"project"'; then
            echo "El proyecto ya existe en SonarCloud."
            echo "project_created=false" >> $GITHUB_ENV
          else
            echo "El proyecto no existe o hubo un error al verificar. Respuesta de la API:"
            cat response.json

            echo "Intentando crear el proyecto $REPO_NAME en SonarCloud..."
            create_response=$(curl -s -w "%{http_code}" -o create_response.json -X POST -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/projects/create" \
              -d "name=$REPO_NAME" \
              -d "project=$REPO_NAME" \
              -d "organization=$ORGANIZATION" \
              -d "visibility=public")

            if [ "$create_response" -ne 201 ]; then
              echo "Error al crear el proyecto. Respuesta de la API:"
              cat create_response.json
              exit 1
            else
              echo "Proyecto creado exitosamente en SonarCloud."
            fi

            echo "Estableciendo la rama main como predeterminada..."
            branch_response=$(curl -s -w "%{http_code}" -o branch_response.json -X POST -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/project_branches/rename" \
              -d "name=main" \
              -d "project=$REPO_NAME")

            if [ "$branch_response" -ne 200 ]; then
              echo "Error al establecer la rama predeterminada. Respuesta de la API:"
              cat branch_response.json
              exit 1
            fi

            echo "project_created=true" >> $GITHUB_ENV
          fi
      - name: Enable execution of gradlew
        run: |
          chmod 755 gradlew
      - name: Perform Initial Analysis (if Project Created)
        if: env.project_created == 'true'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Realizando análisis inicial en la rama main..."
          ./gradlew sonarqube \
            -Dsonar.projectKey=$REPO_NAME \
            -Dsonar.organization=$ORGANIZATION \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.branch.name=main
      - name: Perform Branch Analysis
        if: env.project_created == 'false'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "Realizando análisis en la rama actual: $BRANCH_NAME..."
          ./gradlew sonarqube \
            -Dsonar.projectKey=$REPO_NAME \
            -Dsonar.organization=$ORGANIZATION \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.branch.name=${{ github.ref_name }}
      - name: Validate Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Validando el estado del Quality Gate..."
          analysisId=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/ce/component?component=$REPO_NAME" | jq -r '.current.analysisId')

          if [ -z "$analysisId" ]; then
            echo "No se encontró un análisis reciente. Verifique la configuración."
            exit 1
          fi

          qualityGateStatus=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r '.projectStatus.status')

          if [ "$qualityGateStatus" != "OK" ]; then
            echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
            echo "Verificando vulnerabilidades críticas..."
            vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER" | jq -r '.total')

            if [ "$vulnerabilities" -gt 0 ]; then
              echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
              #exit 1
            fi
          else
            echo "El proyecto cumple con el Quality Gate y no tiene vulnerabilidades críticas. Continuando sin problemas."
          fi

# SCA:
#   needs: SAST
#   runs-on: ubuntu-24.04
#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v2
#   - name: Build
#     run: |
#       if [ -f "build.gradle" ]; then
#         echo "Proyecto utiliza archivo build.gradle"
#         echo "Se habilita permiso de ejecución de archivo gradlew"
#         chmod 777 gradlew
#         ./gradlew build
#         ls -R
#       else 
#         echo "Otro tipo de proyecto"
#       fi
#   - name: Dependency Check
#     uses: dependency-check/Dependency-Check_Action@1.1.0
#     env:
#       JAVA_HOME: /opt/jdk
#     id: Depcheck
#     with:
#       project: '${{ github.event.repository.name }}'
#       path: '.'
#       format: 'HTML'
#       args: >
#         --out ./reports
#         --failOnCVSS 7
#         --enableRetired
#   - name: Upload Test Result
#     uses: actions/upload-artifact@master
#     with:
#       name: Depcheck Report
#       path: ./reports
#   - name: Upload JAR
#     uses: actions/upload-artifact@master
#     with:
#       name: JAR
#       path: ${{github.workspace}}/build/libs/spring-petclinic-2.6.0.jar
# DockerBuild:
#   needs: SCA
#   runs-on: ubuntu-24.04
#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v2
#   - name: Docker Login
#     uses: docker/login-action@v3.0.0
#     with:
#       username: ${{ secrets.DOCKER_USER }}
#       password: ${{ secrets.DOCKER_PASSWORD }}
#   - name: Download JAR
#     uses: actions/download-artifact@master
#     with:
#       name: JAR
#       path: ${{github.workspace}}
#   - name: Docker Build
#     run: |
#       ls -R
#       docker build --tag b4b4y4g4x/cursodevsecops-test:latest .
#   - name: Push Docker
#     run: |
#       docker push b4b4y4g4x/cursodevsecops-test:latest
# DockerScan:
#   needs: DockerBuild
#   runs-on: ubuntu-24.04
#   steps:
#   - name: Docker Login
#     uses: docker/login-action@v3.0.0
#     with:
#       username: ${{ secrets.DOCKER_USER }}
#       password: ${{ secrets.DOCKER_PASSWORD }}
#   - name: Pull Docker
#     run: |
#       docker pull b4b4y4g4x/cursodevsecops-test:latest
#   - name: Run Trivy Scan
#     uses: aquasecurity/trivy-action@master
#     with:
#       image-ref: 'b4b4y4g4x/cursodevsecops-test:latest'
#       format: 'table'
