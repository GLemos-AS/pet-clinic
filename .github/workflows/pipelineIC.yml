name: Workflow

on:
  push:
    branches:
      - feature-clase1

jobs:
  SAST:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set Environment Variables
        run: echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Validate and Configure build.gradle
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -f "build.gradle" ]; then
            echo "Archivo build.gradle encontrado"
            echo "Verificando configuración del plugin de SonarCloud"

            # Verifica si el plugin de SonarCloud ya está configurado
            if ! grep -q 'id "org.sonarqube" version "3.3"' build.gradle; then
              echo "Plugin de SonarCloud no configurado. Añadiendo al archivo build.gradle..."
              sed -i '/id '\''java'\''/a \ \ \ \ id '\''org.sonarqube'\'' version '\''3.3'\''' build.gradle
              echo "Plugin de SonarCloud añadido con éxito"
            else
              echo "Plugin de SonarCloud ya está configurado en build.gradle"
            fi

            cat build.gradle
          else
            echo "No se encontró archivo build.gradle"
            exit 1
          fi

      - name: Validate Project in SonarCloud
        id: validateProjectOnSonar
        run: |
          PROJECT_NAME="pet-clinic-prueba"
          ORGANIZATION="glemosas"
          
          # Intenta crear el proyecto en SonarCloud
          echo "Verificando si el proyecto ya existe en SonarCloud..."

          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/projects/create" \
            -d "name=${PROJECT_NAME}" \
            -d "project=${PROJECT_NAME}" \
            -d "organization=${ORGANIZATION}" \
            -d "visibility=public")

          if [ "$response" -eq 400 ]; then
            echo "Proyecto '${PROJECT_NAME}' ya existe en SonarCloud"
            echo "project_created=false" >> $GITHUB_ENV
          elif [ "$response" -eq 200 ]; then
            echo "Proyecto '${PROJECT_NAME}' creado exitosamente en SonarCloud"
            echo "Se establece la rama 'main' como rama por defecto"
            
            # Cambia la rama principal a 'main'
            curl -s -o /dev/null -w "%{http_code}" -X POST -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/project_branches/rename" \
              -d "name=main" \
              -d "project=${PROJECT_NAME}"
            
            echo "project_created=true" >> $GITHUB_ENV
          else
            echo "Error al crear el proyecto en SonarCloud. Código de respuesta: $response"
            exit 1
          fi


      - name: Enable execution gradlew
        run: |
          chmod +x gradlew

      - name: Perform Initial Analysis (if Project Created)
        if: env.project_created == 'true'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: pet-clinic-prueba
        run: |
          echo "Realizando análisis inicial en la rama main..."
          ./gradlew sonarqube \
            -Dsonar.projectKey=$REPO_NAME \
            -Dsonar.organization=glemosas \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.branch.name=main

      - name: Perform Branch Analysis
        if: env.project_created == 'false'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: pet-clinic-prueba
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "Realizando análisis en la rama actual: $BRANCH_NAME..."
          ./gradlew sonarqube \
            -Dsonar.projectKey=$REPO_NAME \
            -Dsonar.organization=glemosas \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.branch.name=${{ github.ref_name }}

      - name: Validate Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: pet-clinic-prueba
        run: |
          echo "Validando el estado del Quality Gate..."
          analysisId=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/ce/component?component=$REPO_NAME" | jq -r '.current.analysisId')

          if [ -z "$analysisId" ]; then
            echo "No se encontró un análisis reciente. Verifique la configuración."
            exit 1
          fi

          qualityGateStatus=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r '.projectStatus.status')

          if [ "$qualityGateStatus" != "OK" ]; then
            echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
            echo "Verificando vulnerabilidades críticas..."
            vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER" | jq -r '.total')

            if [ "$vulnerabilities" -gt 0 ]; then
              echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
              exit 1
            fi
          else
            echo "El proyecto cumple con el Quality Gate y no tiene vulnerabilidades críticas. Continuando sin problemas."
          fi
